//==>create a function to find the maximum number of array
#include <algorithm>
#include <iostream>
#include <array>

int main() {
   std::array<int,SIZE> arr{5,8,90,12,33};
   auto i= std::max_element(arr.begin(),arr.end());
std::cout<<"the max number is :"<<*i<<std::endl;
    return 0;
}

/************************************/
//==> create a function to search to the number in the array which number is take from user

int main() {

   std::array<int,5>arr{5,8,90,12,33};
   std::for_each(arr.begin(),arr.end(),[](int i){std::cout<<i<<" ";});
    
    std::cout<<"\n enter the num u need ";
    int num;
    std::cin>>num;
   auto it= std::find(arr.begin(),arr.end(),num);
if (it != arr.end()) {
        int index = std::distance(arr.begin(), it);
        std::cout << "The number you chose is at index: " << index << std::endl;
    } 
    else {
        std::cout << "Number not found in the array." << std::endl;
    }   
     return 0;
}

/************************************/


//// Function to delete a number in the array


void deleteNumber(std::vector<int>& arr, int number) {
    arr.erase(std::remove(arr.begin(), arr.end(), number), arr.end());
}

/************************************/
// Function to merge two arrays together
std::vector<int> mergeArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {
    std::vector<int> merged = arr1;
    merged.insert(merged.end(), arr2.begin(), arr2.end());
    return merged;
}

/************************************/
#include <iostream>
#define SIZE 10
int arr_odd[SIZE];
int arr_even[SIZE];

int sperate_fun(int array[])
{
int k=0;
int l=0;
 
    for(int i=0;i<SIZE;i++)
    {
    if(array[i]%2==0)
    {
        arr_even[k]=array[i];
          k++;
    }
    else
    {
        arr_odd[l]=array[i];
       l++;
    }
    }

}
int main() {

   int arr[SIZE]={1,2,3,4,5,6,7,8,9,10};
   for(int i=0;i<SIZE;i++)
    {
        std::cout<<arr[i]<<" ";
    }
        std::cout<<std::endl;

    sperate_fun(arr);
   for(int i=0;i<SIZE;i++)
    {
        if(arr_odd[i]!=0)
        std::cout<<arr_odd[i]<<" ";
    } 
    std::cout<<std::endl;
    for(int i=0;i<SIZE;i++)
{        if(arr_even[i]!=0)
        std::cout<<arr_even[i]<<" ";

    }

    return 0;
}
/************************************/

#include <iostream>

char arr[100];

void merge_fun(const char array[], const char array2[]) {
    int i = 0;
    int j = 0;

    // Copy the first array into arr
    while (array[i] != '\0') {
        arr[i] = array[i];
        i++;
    }

    // Copy the second array into arr
    while (array2[j] != '\0') {
        arr[i] = array2[j];
        i++;
        j++;
    }

    // Null-terminate the merged array
    arr[i] = '\0';
}

int main() {
    char arr1[50] = "mohamed";
    char arr2[50] = "sarhan";

    merge_fun(arr1, arr2);

    // Print the merged array
    std::cout << arr << std::endl;

    return 0;
}
/**********************************************************/
#include<iostream>


int main()
{


auto fun=[](int num){
    return num*num;
    };
int number;
std::cin>>number;

std::cout<<"the square of a given number :"<<fun(number);
    return 0;
}
/**********************************************************/
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 3, 8, 1, 9, 2, 7};

    std::sort(numbers.begin(), numbers.end(), [](int a, int b) {
        return a < b;
    });

    std::cout << "Sorted in ascending order: ";
    for (int num : numbers) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    std::sort(numbers.begin(), numbers.end(), [](int a, int b) {
        return a > b;
    });

    std::cout << "Sorted in descending order: ";
    for (int num : numbers) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}
